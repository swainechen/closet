#!/usr/bin/perl -w
#
# take genome sequence as fasta
# spit out MLST alleles, ST
#
use strict;
use slchen;
use slc454;
use Getopt::Long;
&Getopt::Long::Configure("pass_through");
use WWW::Mechanize;
use HTML::TokeParser;

my $verbose = 0;
my $blast_helper = `which slc-blastn`;
chomp $blast_helper;
my $base_page = "http://mlst.ucc.ie/mlst/dbs/Ecoli";
my @mlst = qw(adk fumC gyrB icd mdh purA recA);
my $ref = {};
my $data;
my $allelenum;
my $s;
my $get_st = 1;

GetOptions (
  'verbose' => \$verbose
);

if (!defined $ARGV[0] || !-f $ARGV[0]) {
  print "Usage: $0 [ -verbose ] <genome fasta file>\n";
  exit;
}

my $genome = $ARGV[0];
&set_reference($ref);

foreach $s (@mlst) {
  $data->{$s} = get_allele($genome, $ref->{$s});
  if (!$data->{$s}) {
    print STDERR "Can't find allele for $s\n";
    $get_st = 0;
    $allelenum->{$s} = 0;
  } else {
    $allelenum->{$s} = (get_allelenum($data->{$s}, $s))[0];
  }
}

my $st = get_st($allelenum) if $get_st;

if ($verbose) {
  print "# $genome\n";
  foreach $s (@mlst) {
    print ">$s|$allelenum->{$s}\n$data->{$s}\n" if $allelenum->{$s};
  }
  print ">ST:$st->{ST},$st->{IDENTICAL}\n" if $get_st;
} else {
  print "# $genome\n";
  foreach $s (@mlst) {
    print "$s\t$allelenum->{$s}\n";
  }
  print "ST\t$st->{ST}\n" if $get_st;
}

sub get_allele {
  my ($genome, $query) = @_;
  my $name;
  my @blast = `echo $query | $blast_helper -db $genome -b 1 -v 1 -m 0`;
  my $seq = slc454::full_blast_sequences('BLASTN', @blast);
  foreach $name (sort { $seq->{$a}->{EVALUE} <=> $seq->{$b}->{EVALUE} } keys %$seq) {
    return ($seq->{$name}->{SEQUENCE});
  }
  return 0;
}

sub get_allelenum {
  my ($sequence, $target) = @_;
  my $agent = WWW::Mechanize->new();

  $agent->get($base_page);
  $agent->submit_form(
    fields      => {
      seqEditTextCtl => $sequence,
      MyDropDownList => $target,
    },
    button => 'handlers/evalSTForm:action'
  );

  my $stream = HTML::TokeParser->new(\$agent->{content});
  my $result;

  $stream->get_tag("textarea");
  my $tag = $stream->get_tag("textarea");
  if ($tag->[1]{name} and $tag->[1]{name} eq "seqResponseTextCtl") {
    $result = $stream->get_text("/textarea");
  }

  my $start;
  my $allele;
  my $identical;
  my $alignlength;
  my $sequencelength;

  if ($result =~ /Your sequence with length: (\d+)/) {
    $sequencelength = $1;
  }
  if ($result =~ /most resembles (\w+)/) {
    $allele = $1;
  }
  if ($result =~ /starting at (\d+) and with (\d+)\/(\d+) matches/) {
    $start = $1;
    $identical = $2;
    $alignlength = $3;
  }

  if (defined $allele &&
      isint $start &&
      isint $identical &&
      isint $alignlength) {
    return ($allele, $start, $identical, $alignlength);
  } else {
    return (undef, undef, undef, undef);
  }
}

sub get_st {
  my ($alleles) = @_;
  my $target;
  my $agent;
  my $stream;
  my $result;
  my @key;
  my $data;

  # first a sanity check, we need all fields
  foreach $target (@mlst) {
    return undef if !defined $alleles->{$target};
    $alleles->{$target} =~ s/$target//ig;
    return undef if !isint $alleles->{$target};
  }

  $agent = WWW::Mechanize->new();
  $agent->get($base_page);
  $agent->submit_form(
    fields => $alleles,
    button => 'handlers/evalSTForm:action'
  );

  # we first get another form and have to hit "Find ST"
  $agent->submit_form(
    button => 'handlers/findST:action'
  );

  # parse the result
  # if there is an identical allele note that
  # but just pick off the top row of the table
  $stream = HTML::TokeParser->new(\$agent->{content});
  $stream->get_tag("table");    # header table
  $stream->get_tag("table");    # navigation buttons
  $stream->get_tag("table");    # main table
  $stream->get_tag("table");    # the table of STs we want

  $stream->get_tag("tr");       # header row - get the column names here
  @key = ();
  while ($data = $stream->get_tag("td", "TD", "/tr", "/TR")) {
    last if $data->[0] eq "/tr" || $data->[0] eq "/TR";
    push @key, $stream->get_trimmed_text("/td");
  }

  $stream->get_tag("tr");       # row with submitted allele numbers
  $stream->get_tag("tr");       # the first row we want
  while ($data = $stream->get_tag("td", "TD", "/tr", "/TR")) {
    last if $data->[0] eq "/tr" || $data->[0] eq "/TR";
    $result->{shift @key} = $stream->get_trimmed_text("/td");
  }

  # figure out if there are identical alleles
  $data = $stream->get_tag("input");
  while (!defined $data->[1]{name} || $data->[1]{name} ne "identiField") {
    $data = $stream->get_tag("input");
  }
  $result->{IDENTICAL} = $data->[1]{value};

  return $result;
}

sub set_reference {
  my ($ref) = @_;
$ref->{adk} = 'ATGCGTATCATTCTGCTTGGCGCTCCGGGCGCGGGGAAAGGGACTCAGGCTCAGTTCATCATGGAGAAATATGGTATTCCGCAAATCTCCACTGGCGATATGCTGCGTGCTGCGGTCAAATCTGGCTCCGAGCTGGGTAAACAAGCAAAAGACATTATGGATGCTGGCAAACTGGTCACCGACGAACTGGTGATCGCGCTGGTTAAAGAGCGCATTGCTCAGGAAGACTGCCGTAATGGTTTCCTGTTGGACGGCTTCCCGCGTACCATTCCGCAGGCAGACGCGATGAAAGAAGCGGGCATCAATGTTGATTACGTTCTGGAATTCGACGTACCGGACGAACTGATCGTTGACCGTATCGTCGGTCGCCGCGTTCATGCGCCGTCTGGTCGTGTTTATCACGTTAAATTCAATCCGCCGAAAGTAGAAGGCAAAGACGACGTTACCGGTGAAGAACTGACTACCCGTAAAGATGATCAGGAAGAGACCGTACGTAAACGTCTGGTTGAATACCATCAGATGACAGCACCGCTGATCGGCTACTACTCCAAAGAAGCAGAAGCGGGTAATACCAAATACGCGAAAGTTGACGGCACCAAGCCGGTTGCTGAAGTTCGCGCTGATCTGGAAAAAATCCTCGGCTAA';
$ref->{fumC} = 'ATGAATACAGTACGCAGCGAAAAAGATTCGATGGGGGCGATTGATGTCCCGGCAGATAAGCTGTGGGGCGCACAAACTCAACGCTCGCTGGAGCATTTCCGCATTTCGACGGAGAAAATGCCCACCTCACTGATTCATGCGCTGGCGCTAACCAAGCGTGCAGCGGCAAAAGTTAATGAAGATTTAGGCTTGTTGTCTGAAGAGAAAGCGAGCGCCATTCGTCAGGCGGCGGATGAAGTACTGGCAGGACAGCATGACGACGAATTCCCGCTGGCTATCTGGCAGACCGGCTCCGGCACGCAAAGTAACATGAACATGAACGAAGTGCTGGCTAACCGGGCCAGTGAATTACTCGGCGGTGTGCGCGGGATGGAACGTAAAGTTCACCCTAACGACGACGTGAACAAAAGCCAAAGTTCCAACGATGTCTTTCCGACGGCGATGCACGTTGCGGCGCTGCTGGCGCTGCGCAAGCAACTCATTCCTCAGCTTAAAACCCTGACACAGACACTGAATGAGAAATCCCGTGCTTTTGCCGATATCGTCAAAATTGGTCGTACTCACTTGCAGGATGCCACGCCGTTAACGCTGGGGCAGGAGATTTCCGGCTGGGTAGCGATGCTCGAGCATAATCTCAAACATATCGAATACAGCCTGCCTCACGTAGCGGAACTGGCTCTTGGCGGTACAGCGGTGGGTACTGGACTAAATACCCATCCGGAGTATGCGCGTCGCGTAGCAGATGAACTGGCAGTCATTACCTGTGCACCGTTTGTTACCGCGCCGAACAAATTTGAAGCGCTGGCGACCTGTGATGCCCTGGTTCAGGCGCACGGCGCGTTGAAAGGGTTGGCTGCGTCACTGATGAAAATCGCCAATGATGTCCGCTGGCTGGCCTCTGGCCCGCGCTGCGGAATTGGTGAAATCTCAATCCCGGAAAATGAGCCGGGCAGCTCAATCATGCCGGGGAAAGTGAACCCAACACAGTGTGAGGCATTAACCATGCTCTGCTGTCAGGTGATGGGGAACGACGTGGCGATCAACATGGGGGGCGCTTCCGGTAACTTTGAACTGAACGTCTTCCGTCCAATGGTGATCCACAATTTCCTGCAATCGGTGCGCTTGCTGGCAGATGGCATGGAAAGTTTTAACAAACACTGCGCAGTGGGTATTGAACCGAATCGTGAGCGAATCAATCAATTACTCAATGAATCGCTGATGCTGGTGACTGCGCTTAACACCCACATTGGTTATGACAAAGCCGCCGAGATCGCCAAAAAAGCGCATAAAGAAGGGCTGACCTTAAAAGCTGCGGCCCTTGCGCTGGGGTATCTTAGCGAAGCCGAGTTTGACAGCTGGGTACGGCCAGAACAGATGGTCGGCAGTATGAAAGCCGGGCGTTAA';
$ref->{gyrB} = 'ATGTCGAATTCTTATGACTCCTCCAGTATCAAAGTCCTGAAAGGGCTGGATGCGGTGCGTAAGCGCCCGGGTATGTATATCGGCGACACGGATGACGGCACCGGTCTGCACCACATGGTATTCGAGGTGGTAGATAACGCTATCGACGAAGCGCTCGCGGGTCACTGTAAAGAAATTATCGTCACCATTCACGCCGATAACTCTGTCTCTGTACAGGATGACGGGCGCGGCATTCCGACCGGTATTCACCCGGAAGAGGGCGTATCGGCGGCGGAAGTGATCATGACCGTTCTGCACGCAGGCGGTAAATTTGACGATAACTCCTATAAAGTGTCCGGCGGTCTGCACGGCGTTGGTGTTTCGGTAGTAAACGCCCTGTCGCAAAAACTGGAGCTGGTTATCCAGCGCGAGGGTAAAATTCACCGTCAGATCTACGAACACGGTGTACCGCAGGCCCCGCTGGCGGTTACCGGCGAGACTGAAAAAACCGGCACCATGGTGCGTTTCTGGCCCAGCCTCGAAACCTTCACCAATGTGACCGAGTTCGAATATGAAATTCTGGCGAAACGTCTGCGTGAGTTGTCGTTCCTCAACTCCGGCGTTTCCATTCGTCTGCGCGACAAGCGCGACGGCAAAGAAGACCACTTCCACTATGAAGGCGGCATCAAGGCGTTCGTTGAATATCTGAACAAGAACAAAACGCCGATCCACCCGAATATCTTCTACTTCTCCACTGAAAAAGACGGTATTGGCGTCGAAGTGGCGTTGCAGTGGAACGATGGCTTCCAGGAAAACATCTACTGCTTTACCAACAACATTCCGCAGCGTGACGGCGGTACTCACCTGGCAGGCTTCCGTGCGGCGATGACCCGTACCCTGAACGCCTACATGGACAAAGAAGGCTACAGCAAAAAAGCCAAAGTCAGCGCCACCGGTGACGATGCGCGTGAAGGCCTGATTGCGGTCGTTTCCGTGAAAGTGCCGGACCCGAAATTCTCCTCCCAGACCAAAGACAAACTGGTTTCTTCTGAGGTGAAATCGGCGGTTGAACAGCAGATGAACGAACTGCTGGCAGAATACCTGCTGGAAAACCCAACCGACGCGAAAATCGTGGTTGGCAAAATTATCGATGCTGCCCGTGCCCGTGAAGCGGCGCGTCGCGCGCGTGAAATGACCCGCCGTAAAGGTGCGCTCGACTTAGCGGGCCTGCCGGGCAAACTGGCAGACTGCCAGGAACGCGATCCGGCGCTTTCCGAACTGTACCTGGTGGAAGGGGACTCCGCGGGCGGCTCTGCGAAGCAGGGGCGTAACCGCAAGAACCAGGCGATTCTGCCGCTGAAGGGTAAAATCCTCAACGTCGAGAAAGCGCGCTTCGATAAGATGCTCTCTTCTCAGGAAGTGGCGACGCTTATCACCGCGCTTGGCTGTGGTATCGGTCGTGACGAGTACAACCCGGACAAACTGCGTTATCACAGCATCATCATCATGACCGATGCGGACGTCGACGGCTCGCACATTCGTACGCTGCTGTTGACCTTCTTCTATCGTCAGATGCCGGAAATCGTTGAACGCGGTCACGTCTACATCGCTCAGCCGCCGCTGTACAAAGTGAAGAAAGGCAAGCAGGAACAGTACATTAAAGACGACGAAGCGATGGATCAGTACCAGATCTCTATCGCGCTGGACGGCGCAACGCTGCACACCAACGCCAGTGCACCGGCATTGGCTGGCGAAGCGTTAGAGAAACTGGTATCTGAGTACAACGCGACGCAGAAAATGATCAATCGTATGGAGCGTCGTTATCCGAAAGCAATGCTGAAAGAGCTTATCTATCAGCCGACGTTGACGGAAGCTGACCTTTCTGATGAGCAGACCGTTACCCGCTGGGTGAACGCGCTGGTCAGCGAACTGAACGACAAAGAACAGCACGGCAGCCAGTGGAAGTTTGATGTTCACACCAATGCTGAGCAAAACCTGTTCGAGCCGATTGTTCGCGTGCGTACCCACGGTGTGGATACTGACTATCCGCTGGATCACGAGTTTATCACCGGTGGCGAATATCGTCGTATCTGCACGCTGGGTGAGAAACTGCGTGGCTTGCTGGAAGAAGATGCGTTTATCGAACGTGGCGAGCGTCGTCAGCCGGTAGCCAGCTTCGAGCAGGCGCTGGACTGGCTGGTGAAAGAGTCCCGTCGCGGCCTCTCCATCCAGCGTTATAAAGGTCTGGGCGAGATGAACCCGGAACAGCTGTGGGAAACCACTATGGACCCGGAAAGTCGTCGTATGCTGCGCGTTACCGTTAAAGATGCGATTGCTGCCGACCAGTTGTTCACCACGCTGATGGGCGACGCCGTTGAACCGCGCCGTGCGTTTATTGAAGAGAACGCCCTGAAAGCGGCGAATATCGATATTTAA';
$ref->{icd} = 'ATGGAAAGTAAAGTAGTTGTTCCGGCACAAGGCAAGAAGATCACCCTGCAAAACGGCAAACTCAACGTTCCTGAAAATCCGATTATCCCTTACATTGAAGGTGATGGAATCGGTGTAGATGTAACCCCAGCCATGCTGAAAGTGGTCGACGCTGCAGTCGAGAAAGCCTATAAAGGCGAGCGTAAAATCTCCTGGATGGAAATTTACACCGGTGAAAAATCCACACAGGTTTATGGTCAGGACGTCTGGCTGCCTGCTGAAACTCTTGATCTGATTCGTGAATATCGCGTTGCCATTAAAGGTCCGCTGACCACTCCGGTTGGTGGCGGTATTCGCTCTCTGAACGTTGCCCTGCGCCAGGAACTGGATCTCTACATCTGCCTGCGTCCGGTACGTTACTATCAGGGCACTCCAAGCCCGGTTAAACACCCTGAACTGACCGATATGGTTATCTTCCGTGAAAACTCGGAAGACATTTATGCGGGTATCGAATGGAAAGCAGACTCTGCCGACGCCGAGAAAGTGATTAAATTCCTGCGTGAAGAGATGGGGGTGAAGAAAATTCGCTTCCCGGAACATTGTGGTATCGGTATTAAGCCGTGTTCGGAAGAAGGCACCAAACGTCTGGTTCGTGCAGCGATCGAATACGCAATTGCTAACGATCGTGACTCTGTGACTCTGGTGCACAAAGGCAACATCATGAAGTTCACCGAAGGAGCGTTTAAAGACTGGGGCTACCAGCTGGCGCGTGAAGAGTTTGGCGGTGAACTGATCGACGGTGGCCCGTGGCTGAAAGTTAAAAACCCGAACACTGGCAAAGAGATCGTCATTAAAGACGTGATTGCTGATGCATTCCTGCAACAGATCCTGCTGCGTCCGGCTGAATATGATGTTATCGCCTGTATGAACCTGAACGGTGACTACATTTCTGACGCCCTGGCAGCGCAGGTTGGCGGTATCGGTATCGCCCCTGGTGCAAACATCGGTGACGAATGCGCCCTGTTTGAAGCCACCCACGGTACTGCGCCGAAATATGCCGGTCAGGACAAAGTAAATCCTGGCTCTATTATTCTCTCCGCTGAGATGATGCTGCGCCACATGGGTTGGACCGAAGCGGCTGACTTAATTGTTAAAGGTATGGAAGGCGCAATCAACGCGAAAACCGTAACCTATGACTTCGAGCGTCTGATGGATGGCGCTAAACTGCTGAAATGTTCAGAGTTTGGTGACGCGATCATCGAAAACATGTAA';
$ref->{mdh} = 'ATGAAAGTCGCAGTCCTCGGCGCTGCTGGCGGTATTGGCCAGGCGCTTGCACTACTGTTAAAAACCCAACTGCCTTCAGGTTCAGAACTCTCTCTGTATGATATCGCTCCAGTGACTCCCGGTGTGGCTGTCGATCTGAGCCATATCCCTACTGCTGTGAAAATCAAAGGTTTTTCTGGTGAAGATGCGACTCCGGCGCTGGAAGGCGCAGATGTCGTTCTTATCTCTGCAGGCGTAGCGCGTAAACCGGGTATGGATCGTTCCGACCTGTTTAACGTTAACGCCGGCATCGTGAAAAACCTGGTACAGCAAGTTGCGAAAACCTGCCCGAAAGCGTGCATTGGTATTATCACTAACCCGGTTAACACCACAGTTGCAATTGCTGCTGAAGTGCTGAAAAAAGCCGGTGTTTATGACAAAAACAAACTGTTCGGCGTTACCACGCTGGATATCATTCGTTCCAACACCTTTGTTGCGGAACTGAAAGGCAAACAGCCAGGCGAAGTTGAAGTGCCGGTTATTGGCGGTCACTCTGGTGTTACCATTCTGCCGCTGCTGTCACAGGTTCCTGGCGTTAGTTTTACCGAGCAGGAAGTGGCTGATCTGACCAAACGCATCCAGAACGCGGGTACTGAAGTGGTTGAAGCGAAGGCCGGTGGCGGGTCTGCAACCCTGTCTATGGGCCAGGCAGCTGCACGTTTTGGTCTGTCTCTGGTTCGTGCACTGCAGGGCGAACAAGGCGTTGTCGAATGTGCCTACGTTGAAGGCGACGGTCAGTACGCCCGTTTCTTCTCTCAACCGCTGCTGCTGGGTAAAAACGGCGTGGAAGAGCGTAAATCTATCGGTACCCTGAGCGCATTTGAACAGAACGCGCTGGAAGGTATGCTGGATACGCTGAAGAAAGATATCGCCCTGGGCGAAGAGTTCGTTAATAAGTAA';
$ref->{purA} = 'ATGGGTAACAACGTCGTCGTACTGGGCACCCAATGGGGTGACGAAGGTAAAGGTAAGATCGTCGATCTTCTGACTGAACGGGCTAAATATGTTGTACGCTACCAGGGCGGTCACAACGCAGGCCATACTCTCGTAATCAACGGTGAAAAAACCGTTCTCCATCTTATTCCATCAGGTATTCTCCGCGAGAATGTAACCAGCATCATCGGTAACGGTGTTGTGCTGTCTCCGGCCGCGCTGATGAAAGAGATGAAAGAACTGGAAGACCGTGGCATCCCCGTTCGTGAGCGTCTGCTGCTGTCTGAAGCATGTCCGCTGATCCTTGATTATCACGTTGCGCTGGATAACGCGCGTGAGAAAGCGCGTGGCGCGAAAGCGATCGGCACCACCGGTCGTGGTATCGGGCCTGCTTATGAAGATAAAGTAGCACGTCGCGGTCTGCGTGTTGGCGACCTTTTCGACAAAGAAACCTTCGCTGAAAAACTGAAAGAAGTGATGGAATATCACAACTTCCAGTTGGTTAACTACTACAAAGCTGAAGCGGTTGATTACCAGAAAGTTCTGGATGATACGATGGCTGTTGCCGACATCCTGACTTCTATGGTGGTTGACGTTTCTGACCTGCTCGACCAGGCGCGTCAGCGTGGCGATTTCGTCATGTTTGAAGGTGCGCAGGGTACGCTGCTGGATATCGACCACGGTACTTATCCGTACGTAACTTCTTCCAACACCACTGCTGGTGGCGTGGCGACCGGTTCCGGCCTGGGCCCGCGTTATGTTGATTACGTTCTGGGTATCCTCAAAGCTTACTCCACTCGTGTAGGTGCAGGTCCGTTCCCGACCGAACTGTTTGATGAAACTGGCGAGTTCCTCTGCAAGCAGGGTAACGAATTCGGCGCAACTACGGGGCGTCGTCGTCGTACCGGCTGGCTGGACACCGTTGCCGTTCGTCGTGCGGTACAGCTGAACTCCCTGTCTGGCTTCTGCCTGACTAAACTGGACGTTCTGGATGGCCTGAAAGAGGTTAAACTCTGCGTGGCTTACCGTATGCCGGATGGTCGCGAAGTGACTACCACTCCGCTGGCAGCTGACGACTGGAAAGGTGTAGAGCCGATTTACGAAACCATGCCGGGCTGGTCTGAATCCACCTTCGGCGTGAAAGATCGTAGCGGCCTGCCGCAGGCGGCGCTGAACTATATCAAGCGTATTGAAGAGCTGACTGGTGTGCCGATCGATATCATCTCTACCGGTCCGGATCGTACTGAAACCATGATTCTGCGCGACCCGTTCGACGCGTAA';
$ref->{recA} = 'ATGGCTATCGACGAAAACAAACAGAAAGCGTTGGCGGCAGCACTGGGCCAGATTGAGAAACAATTTGGTAAAGGCTCCATCATGCGCCTGGGTGAAGACCGTTCCATGGATGTGGAAACCATCTCTACCGGTTCGCTTTCACTGGATATCGCGCTTGGGGCAGGTGGTCTGCCGATGGGCCGTATCGTCGAAATCTACGGACCGGAATCTTCCGGTAAAACCACGCTGACGCTGCAGGTGATCGCCGCAGCGCAGCGTGAAGGTAAAACCTGTGCGTTTATCGATGCTGAACACGCGCTGGACCCAATCTACGCACGTAAACTGGGCGTCGATATCGACAACCTGCTGTGCTCCCAGCCGGACACCGGCGAGCAGGCACTGGAAATCTGTGACGCCCTGGCGCGTTCTGGCGCAGTAGACGTTATCGTCGTTGACTCCGTGGCGGCACTGACGCCGAAAGCGGAAATCGAAGGCGAAATCGGCGACTCTCACATGGGCCTTGCGGCACGTATGATGAGCCAGGCGATGCGTAAGCTGGCGGGTAACCTGAAGCAGTCCAACACGCTGCTGATCTTCATCAACCAGATCCGTATGAAAATTGGTGTGATGTTCGGTAACCCGGAAACCACTACCGGTGGTAACGCGCTGAAATTCTACGCCTCTGTTCGTCTCGACATCCGTCGTATCGGCGCGGTGAAAGAGGGCGAAAACGTGGTGGGTAGCGAAACCCGCGTGAAAGTGGTGAAGAACAAAATCGCTGCGCCGTTTAAACAGGCTGAATTCCAGATCCTCTACGGCGAAGGTATCAACTTCTACGGCGAACTGGTTGACCTGGGCGTAAAAGAGAAGCTGATCGAGAAAGCAGGCGCGTGGTACAGCTACAAAGGTGAGAAGATCGGTCAGGGTAAAGCGAATGCGACTGCCTGGCTGAAAGATAACCCGGAAACCGCGAAAGAGATCGAGAAGAAAGTACGTGAGTTGCTGCTGAGCAACCCGAACTCAACGCCGGATTTCTCTGTAGATGATAGCGAAGGCGTAGCAGAAACTAACGAAGATTTTTAA';
}
